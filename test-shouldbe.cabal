name:             test-shouldbe
version:          0.1.0
synopsis:         Catchy combinators for HUnit, inspired by ScalaTest's ShouldMatchers
description:
  .
  The three main primitives are `shouldBe`, `shouldSatisfy` and `shouldThrow`.
  They can be used with @HUnit@, or any framework that integrates with HUnit
  (like @test-framewor@ or @hspec@).
  .
  Here is an example that uses @hspec@.
  .
  > import Test.Hspec.Monadic
  > import Test.Hspec.HUnit ()
  > import Test.HUnit.ShouldBe
  > import Control.Exception
  >
  > main :: IO ()
  > main = hspecX $ do
  >
  >   describe "shouldBe" $ do
  >
  >     it "asserts equality" $ do
  >       "foo" `shouldBe` "foo"
  >
  >   describe "shouldSatisfy" $ do
  >
  >     it "asserts that a predicate holds" $ do
  >       "bar" `shouldSatisfy` (not . null)
  >
  >   describe "shouldThrow" $ do
  >
  >     it "asserts that an exception is thrown" $ do
  >       throw DivideByZero `shouldThrow` (== DivideByZero)
  >
license:          MIT
license-file:     LICENSE
copyright:        (c) 2011, 2012 Simon Hengel
author:           Simon Hengel <sol@typeful.net>
maintainer:       Simon Hengel <sol@typeful.net>
build-type:       Simple
category:         Testing
cabal-version:    >= 1.6

source-repository head
  type: git
  location: https://github.com/sol/test-shouldbe

library
  ghc-options:
      -Wall
  build-depends:
      base < 4.6
    , HUnit
  hs-source-dirs:
      src
  exposed-modules:
      Test.HUnit.ShouldBe
